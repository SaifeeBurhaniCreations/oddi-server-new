// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model OutboxMessage {
  id             String    @id @default(uuid())
  type           String
  processed      Boolean   @default(false)
  content        Json
  occurredOnUtc  DateTime  @default(now())
  createdAt      DateTime  @default(now())
  processedOnUtc DateTime?
  error          String?

  @@index([processed, createdAt])
  @@map("outbox")
}

model InboxMessage {
  id             String    @id @default(uuid())
  eventId        String    @unique
  type           String
  content        Json
  receivedOnUtc  DateTime  @default(now())
  processedOnUtc DateTime?
  error          String?
}

// ================================
// EVENT SOURCING CORE TABLES
// ================================

model Event {
  id         String   @id @default(uuid())
  entityType String // 'Vendor', 'RawMaterial', 'RMPurchasing', 'Production', 'Stock', 'Order', etc.
  entityId   String
  eventType  String
  occurredAt DateTime @default(now())
  actorId    String?
  payload    Json
  version    Int      @default(1)

  // Relations
  actor User? @relation(fields: [actorId], references: [id])

  @@index([entityType, entityId])
  @@index([eventType])
  @@index([occurredAt])
  @@map("events")
}

// ================================
// USER MANAGEMENT
// ================================

model User {
  id         String   @id @default(uuid())
  name       String
  email      String   @unique
  profilePic String
  password   String
  address    String?
  contact    String?
  role       UserRole @default(MANAGER)
  createdBy  String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  creator      User?        @relation("UserCreatedBy", fields: [createdBy], references: [id])
  createdUsers User[]       @relation("UserCreatedBy")
  image_ref    Image        @relation(fields: [profilePic], references: [id])
  productions  Production[]
  events       Event[]

  @@map("users")
}

enum UserRole {
  ADMIN
  MANAGER
}

// // ================================
// // VENDOR & RAW MATERIALS
// // ================================

model Vendor {
  id        String   @id @default(uuid())
  name      String
  address   String
  state     String
  city      String
  zipCode   String
  alias     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  rawMaterials RawMaterial[]
  rmOrders     RMPurchasing[]

  @@map("vendors")
}

model RawMaterial {
  id        String              @id @default(uuid())
  name      String
  image     String
  category  RawMaterialCategory @default(IN)
  unit      String              @default("KG")
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt

  // Relations
  vendor       Vendor         @relation(fields: [vendorId], references: [id])
  vendorId     String
  rmOrders     RMPurchasing[]
  chamberStock ChamberStock[]

  @@map("raw_materials")
}

model RMPurchasing {
  id               String      @id @default(uuid())
  status           OrderStatus @default(PENDING)
  quantityOrdered  Int
  quantityReceived Int
  price            Decimal     @db.Decimal(10, 2)
  orderedDate      DateTime    @default(now())
  recDate          DateTime? // Expected receive date
  estRecDate       DateTime? // Estimated receive date
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt

  // Relations
  rawMaterial   RawMaterial    @relation(fields: [rawMaterialId], references: [id])
  rawMaterialId String
  vendor        Vendor         @relation(fields: [vendorId], references: [id])
  vendorId      String
  purchaseData  PurchaseData[]
  truckDetail   TruckDetail?   @relation(fields: [truckDetailId], references: [id])
  truckDetailId String?

  @@map("rm_orders")
}

model PurchaseData {
  id             String    @id @default(uuid())
  rating         Int       @default(5) @db.SmallInt
  warehousedDate DateTime?
  sampleQuantity Int?
  image          String?
  createdAt      DateTime  @default(now())

  // Relations
  rmOrder      RMPurchasing @relation(fields: [rmOrderId], references: [id])
  rmOrderId    String
  production   Production   @relation(fields: [productionId], references: [id])
  productionId String
  image_rel    Image?       @relation(fields: [image], references: [id])

  @@map("order_data")
}

enum OrderStatus {
  PENDING
  CONFIRMED
  SHIPPED
  DELIVERED
  CANCELLED
}

// // ================================
// // PRODUCTION SYSTEM
// // ================================

model Production {
  id        String           @id @default(uuid())
  status    ProductionStatus @default(PENDING)
  batchCode String           @unique
  startTime DateTime?
  endTime   DateTime?
  recovery  Decimal?         @db.Decimal(5, 2) // Recovery percentage
  wastageQn Int?
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  // Relations
  user         User           @relation(fields: [userId], references: [id])
  userId       String
  lane         Lane?          @relation(fields: [laneId], references: [id])
  laneId       String?
  image_rel    Image?         @relation(fields: [image], references: [id])
  image        String?
  purchaseData PurchaseData[]

  @@map("productions")
}

model Lane {
  id       String @id @default(uuid())
  name     String
  metaData Json?

  // Relations
  productions Production[]

  @@map("lanes")
}

enum ProductionStatus {
  PENDING
  RUNNING
  COMPLETED
  FAILED
}

// // ================================
// // STORAGE & INVENTORY
// // ================================

model Chamber {
  id        String      @id @default(uuid())
  name      String
  createdBy String
  capacity  Int
  type      ChamberType @default(FROZEN)
  createdAt DateTime    @default(now())

  // Relations
  chamberStock  ChamberStock[]
  orderProducts OrderProduct[]

  @@map("chambers")
}

model ChamberStock {
  id       String              @id @default(uuid())
  category RawMaterialCategory @default(IN)
  rating   Int                 @default(5) @db.SmallInt
  quantity Int

  // Relations
  rawMaterial   RawMaterial    @relation(fields: [rawMaterialId], references: [id])
  rawMaterialId String
  chamber       Chamber        @relation(fields: [chamberId], references: [id])
  chamberId     String
  orderProduct  OrderProduct[]

  @@unique([rawMaterialId, chamberId])
  @@map("chamber_stock")
}

enum RawMaterialCategory {
  IN
  OUT
}

enum ChamberType {
  FROZEN
  DRY
}

// // ================================
// // PACKAGING & PRODUCTS
// // ================================

model Packet {
  id        String @id @default(uuid())
  size      String // e.g., "35KG", "86KG"
  quantity  Int
  unit      String @default("KG")
  productId String

  // Relations
  products Product[] @relation("ProductPackets")

  @@map("packaging")
}

model Product {
  id          String @id @default(uuid())
  productName String

  // Relations
  packets      Packet[]       @relation("ProductPackets")
  orderProduct OrderProduct[]

  @@map("products")
}

model Packaging {
  id       String @id @default(uuid())
  size     String
  quantity Int
  unit     String @default("KG")

  // Relations    
  orderProduct OrderProduct[] @relation("OrderProductPackets")

  @@map("packets")
}

// // ================================
// // ORDERS & DISPATCH
// // ================================

model DispatchOrder {
  id               String      @id @default(uuid())
  customerName     String
  address          String
  postalCode       String
  country          String
  state            String
  city             String
  status           OrderStatus @default(PENDING)
  dispatchDate     DateTime?
  estDeliveredDate DateTime?
  deliveredDate    DateTime?
  amount           Decimal     @db.Decimal(10, 2)
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
  truckDetailId    String?

  // Relations
  images        Image[]        @relation("OrderImages")
  truckDetail   TruckDetail?   @relation(fields: [truckDetailId], references: [id])
  orderProducts OrderProduct[] @relation("OrderProduct_DispatchOrder")

  @@map("dispatch_orders")
}

model OrderProduct {
  id              String  @id @default(uuid())
  quantity        Int
  productId       String
  chamberId       String
  packagingId     String?
  chamberStockId  String
  dispatchOrderId String

  // Relations
  product       Product?      @relation(fields: [productId], references: [id])
  chamber       Chamber       @relation(fields: [chamberId], references: [id])
  chamberStock  ChamberStock  @relation(fields: [chamberStockId], references: [id])
  dispatchOrder DispatchOrder @relation(fields: [dispatchOrderId], references: [id], name: "OrderProduct_DispatchOrder")
  Packaging     Packaging[]   @relation("OrderProductPackets")

  @@map("order_products")
}

// // ================================
// // LOGISTICS
// // ================================

model TruckDetail {
  id       String      @id @default(uuid())
  number   String      @unique
  name     String
  type     String
  capacity Int
  contact  String?
  status   TruckStatus @default(AVAILABLE)

  // Relations
  rmPurchases    RMPurchasing[]
  dispatchOrders DispatchOrder[]
  challan        Challan?        @relation(fields: [challanId], references: [id])
  challanId      String?

  @@map("truck_details")
}

model Challan {
  id         String  @id @default(uuid())
  tareWeight Decimal @db.Decimal(8, 2)
  netWeight  Decimal @db.Decimal(8, 2)
  image      String

  // Relations
  truckDetails TruckDetail[]
  image_ref    Image         @relation(fields: [image], references: [id])

  @@map("challans")
}

enum TruckStatus {
  AVAILABLE
  IN_TRANSIT
  LOADING
  UNLOADING
  MAINTENANCE
}

// // ================================
// // MEDIA & IMAGES
// // ================================

model Image {
  id  String @id @default(uuid())
  url String

  // Relations
  purchaseData  PurchaseData[]
  Production    Production[]
  challan       Challan[]
  User          User[]
  dispatchOrder DispatchOrder[] @relation("OrderImages")

  @@map("images")
}

// // ================================
// // STOCK MOVEMENTS (Event Sourcing Style)
// // ================================

model StockMovement {
  id        String         @id @default(uuid())
  productId String?
  chamberId String
  qty       Int
  direction StockDirection
  reason    String?
  createdAt DateTime       @default(now())

  @@index([productId, chamberId])
  @@index([createdAt])
  @@map("stock_movements")
}

enum StockDirection {
  IN
  OUT
}
